import 'dart:async';
import 'dart:convert';
import 'package:assignment_3_safe_news/features/home/model/article_model.dart';
import 'package:assignment_3_safe_news/features/home/repository/article_item_repository.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'notification_service.dart';

/// Service ƒë·ªÉ ki·ªÉm tra tin t·ª©c m·ªõi v√† g·ª≠i th√¥ng b√°o
class NewsNotificationScheduler {
  static final NewsNotificationScheduler _instance =
      NewsNotificationScheduler._internal();
  factory NewsNotificationScheduler() => _instance;
  NewsNotificationScheduler._internal();

  final NotificationService _notificationService = NotificationService();
  final ArticleItemRepository _articleRepository = ArticleItemRepository();
  Timer? _checkTimer;

  static const String _lastCheckKey = 'last_news_check';
  static const String _notificationHistoryKey = 'notification_history';

  /// B·∫Øt ƒë·∫ßu ki·ªÉm tra tin t·ª©c m·ªõi ƒë·ªãnh k·ª≥
  void startPeriodicCheck({Duration interval = const Duration(hours: 1)}) {
    _checkTimer?.cancel();

    _checkTimer = Timer.periodic(interval, (timer) async {
      await _checkForNewNews();
    });
  }

  /// D·ª´ng ki·ªÉm tra ƒë·ªãnh k·ª≥
  void stopPeriodicCheck() {
    _checkTimer?.cancel();
    _checkTimer = null;
  }

  /// Ki·ªÉm tra tin t·ª©c m·ªõi ngay l·∫≠p t·ª©c
  Future<void> checkForNewNewsNow() async {
    await _checkForNewNews();
  }

  /// Logic ch√≠nh ki·ªÉm tra tin t·ª©c m·ªõi
  Future<void> _checkForNewNews() async {
    try {
      // Ki·ªÉm tra xem th√¥ng b√°o c√≥ ƒë∆∞·ª£c b·∫≠t kh√¥ng
      final isNotificationEnabled =
          await _notificationService.areNotificationsEnabled();
      if (!isNotificationEnabled) return;

      // L·∫•y th·ªùi gian check l·∫ßn cu·ªëi
      final prefs = await SharedPreferences.getInstance();
      final lastCheckString = prefs.getString(_lastCheckKey);
      final lastCheck =
          lastCheckString != null
              ? DateTime.parse(lastCheckString)
              : DateTime.now().subtract(const Duration(days: 1));

      // L·∫•y tin t·ª©c m·ªõi t·ª´ c√°c categories ƒë√£ subscribe
      final subscribedCategories = await _getSubscribedCategories();

      for (final category in subscribedCategories) {
        await _checkCategoryForNewNews(category, lastCheck);
      }

      // C·∫≠p nh·∫≠t th·ªùi gian check
      await prefs.setString(_lastCheckKey, DateTime.now().toIso8601String());
    } catch (e) {
      // Log l·ªói n·∫øu c·∫ßn thi·∫øt
    }
  }

  /// L·∫•y danh s√°ch categories m√† user ƒë√£ subscribe
  Future<List<String>> _getSubscribedCategories() async {
    final prefs = await SharedPreferences.getInstance();
    final categories = _notificationService.getNotificationCategories();
    final subscribedCategories = <String>[];

    for (final category in categories) {
      final isSubscribed = prefs.getBool('notifications_$category') ?? true;
      if (isSubscribed) {
        subscribedCategories.add(category);
      }
    }

    return subscribedCategories;
  }

  /// Ki·ªÉm tra tin t·ª©c m·ªõi cho m·ªôt category c·ª• th·ªÉ
  Future<void> _checkCategoryForNewNews(
    String category,
    DateTime lastCheck,
  ) async {
    try {
      // L·∫•y tin t·ª©c t·ª´ repository
      final articlesStream = _articleRepository.fetchArticle(
        categorySlug: category,
      );

      // L·∫•y snapshot ƒë·∫ßu ti√™n t·ª´ stream
      final articles = await articlesStream.first;

      // L·ªçc tin t·ª©c m·ªõi (sau th·ªùi ƒëi·ªÉm check cu·ªëi)
      final newArticles =
          articles.where((article) {
            return article.published.isAfter(lastCheck);
          }).toList();

      // G·ª≠i th√¥ng b√°o cho tin t·ª©c m·ªõi
      for (final article in newArticles.take(3)) {
        // Gi·ªõi h·∫°n 3 tin m·ªõi nh·∫•t
        await _sendNewsNotification(article, category);
      }
    } catch (e) {
      // Handle error
    }
  }

  /// G·ª≠i th√¥ng b√°o cho m·ªôt tin t·ª©c
  Future<void> _sendNewsNotification(
    ArticleModel article,
    String category,
  ) async {
    try {
      // Ki·ªÉm tra xem ƒë√£ g·ª≠i th√¥ng b√°o cho tin n√†y ch∆∞a
      if (await _isNotificationSent(article.link ?? '')) {
        return;
      }

      final categoryNames = {
        'breaking_news': 'Tin n√≥ng',
        'sports': 'Th·ªÉ thao',
        'technology': 'C√¥ng ngh·ªá',
        'business': 'Kinh doanh',
        'entertainment': 'Gi·∫£i tr√≠',
        'health': 'S·ª©c kh·ªèe',
        'science': 'Khoa h·ªçc',
      };

      final categoryName = categoryNames[category] ?? 'Tin t·ª©c';

      await _notificationService.showNotification(
        title: 'üî• $categoryName m·ªõi',
        body: article.title,
        payload: jsonEncode({
          'type': 'news_article',
          'article_url': article.link,
          'category': category,
        }),
      );

      // L∆∞u l·ªãch s·ª≠ ƒë√£ g·ª≠i th√¥ng b√°o
      await _markNotificationSent(article.link ?? '');
    } catch (e) {
      // Handle error
    }
  }

  /// Ki·ªÉm tra xem ƒë√£ g·ª≠i th√¥ng b√°o cho tin n√†y ch∆∞a
  Future<bool> _isNotificationSent(String articleLink) async {
    if (articleLink.isEmpty) return true;

    final prefs = await SharedPreferences.getInstance();
    final historyJson = prefs.getString(_notificationHistoryKey) ?? '[]';
    final history = List<String>.from(jsonDecode(historyJson));

    return history.contains(articleLink);
  }

  /// ƒê√°nh d·∫•u ƒë√£ g·ª≠i th√¥ng b√°o cho tin n√†y
  Future<void> _markNotificationSent(String articleLink) async {
    if (articleLink.isEmpty) return;

    final prefs = await SharedPreferences.getInstance();
    final historyJson = prefs.getString(_notificationHistoryKey) ?? '[]';
    final history = List<String>.from(jsonDecode(historyJson));

    history.add(articleLink);

    // Gi·ªõi h·∫°n l·ªãch s·ª≠ (ch·ªâ gi·ªØ 1000 tin g·∫ßn nh·∫•t)
    if (history.length > 1000) {
      history.removeRange(0, history.length - 1000);
    }

    await prefs.setString(_notificationHistoryKey, jsonEncode(history));
  }

  /// X√≥a l·ªãch s·ª≠ th√¥ng b√°o c≈© (ƒë·ªÉ cleanup)
  Future<void> clearOldNotificationHistory() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove(_notificationHistoryKey);
    await prefs.remove(_lastCheckKey);
  }
}
